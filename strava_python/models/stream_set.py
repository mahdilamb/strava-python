# coding: utf-8

"""
    Strava API v3

    The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from strava_python.models.altitude_stream import AltitudeStream
from strava_python.models.cadence_stream import CadenceStream
from strava_python.models.distance_stream import DistanceStream
from strava_python.models.heartrate_stream import HeartrateStream
from strava_python.models.lat_lng_stream import LatLngStream
from strava_python.models.moving_stream import MovingStream
from strava_python.models.power_stream import PowerStream
from strava_python.models.smooth_grade_stream import SmoothGradeStream
from strava_python.models.smooth_velocity_stream import SmoothVelocityStream
from strava_python.models.temperature_stream import TemperatureStream
from strava_python.models.time_stream import TimeStream

class StreamSet(BaseModel):
    """
    StreamSet
    """
    time: Optional[TimeStream] = None
    distance: Optional[DistanceStream] = None
    latlng: Optional[LatLngStream] = None
    altitude: Optional[AltitudeStream] = None
    velocity_smooth: Optional[SmoothVelocityStream] = None
    heartrate: Optional[HeartrateStream] = None
    cadence: Optional[CadenceStream] = None
    watts: Optional[PowerStream] = None
    temp: Optional[TemperatureStream] = None
    moving: Optional[MovingStream] = None
    grade_smooth: Optional[SmoothGradeStream] = None
    __properties = ["time", "distance", "latlng", "altitude", "velocity_smooth", "heartrate", "cadence", "watts", "temp", "moving", "grade_smooth"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StreamSet:
        """Create an instance of StreamSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of time
        if self.time:
            _dict['time'] = self.time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of distance
        if self.distance:
            _dict['distance'] = self.distance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of latlng
        if self.latlng:
            _dict['latlng'] = self.latlng.to_dict()
        # override the default output from pydantic by calling `to_dict()` of altitude
        if self.altitude:
            _dict['altitude'] = self.altitude.to_dict()
        # override the default output from pydantic by calling `to_dict()` of velocity_smooth
        if self.velocity_smooth:
            _dict['velocity_smooth'] = self.velocity_smooth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of heartrate
        if self.heartrate:
            _dict['heartrate'] = self.heartrate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cadence
        if self.cadence:
            _dict['cadence'] = self.cadence.to_dict()
        # override the default output from pydantic by calling `to_dict()` of watts
        if self.watts:
            _dict['watts'] = self.watts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of temp
        if self.temp:
            _dict['temp'] = self.temp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of moving
        if self.moving:
            _dict['moving'] = self.moving.to_dict()
        # override the default output from pydantic by calling `to_dict()` of grade_smooth
        if self.grade_smooth:
            _dict['grade_smooth'] = self.grade_smooth.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StreamSet:
        """Create an instance of StreamSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StreamSet.parse_obj(obj)

        _obj = StreamSet.parse_obj({
            "time": TimeStream.from_dict(obj.get("time")) if obj.get("time") is not None else None,
            "distance": DistanceStream.from_dict(obj.get("distance")) if obj.get("distance") is not None else None,
            "latlng": LatLngStream.from_dict(obj.get("latlng")) if obj.get("latlng") is not None else None,
            "altitude": AltitudeStream.from_dict(obj.get("altitude")) if obj.get("altitude") is not None else None,
            "velocity_smooth": SmoothVelocityStream.from_dict(obj.get("velocity_smooth")) if obj.get("velocity_smooth") is not None else None,
            "heartrate": HeartrateStream.from_dict(obj.get("heartrate")) if obj.get("heartrate") is not None else None,
            "cadence": CadenceStream.from_dict(obj.get("cadence")) if obj.get("cadence") is not None else None,
            "watts": PowerStream.from_dict(obj.get("watts")) if obj.get("watts") is not None else None,
            "temp": TemperatureStream.from_dict(obj.get("temp")) if obj.get("temp") is not None else None,
            "moving": MovingStream.from_dict(obj.get("moving")) if obj.get("moving") is not None else None,
            "grade_smooth": SmoothGradeStream.from_dict(obj.get("grade_smooth")) if obj.get("grade_smooth") is not None else None
        })
        return _obj


