# coding: utf-8

"""
    Strava API v3

    The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from strava_python.models.activity_type import ActivityType
from strava_python.models.sport_type import SportType

class UpdatableActivity(BaseModel):
    """
    UpdatableActivity
    """
    commute: Optional[StrictBool] = Field(None, description="Whether this activity is a commute")
    trainer: Optional[StrictBool] = Field(None, description="Whether this activity was recorded on a training machine")
    hide_from_home: Optional[StrictBool] = Field(None, description="Whether this activity is muted")
    description: Optional[StrictStr] = Field(None, description="The description of the activity")
    name: Optional[StrictStr] = Field(None, description="The name of the activity")
    type: Optional[ActivityType] = None
    sport_type: Optional[SportType] = None
    gear_id: Optional[StrictStr] = Field(None, description="Identifier for the gear associated with the activity. ‘none’ clears gear from activity")
    __properties = ["commute", "trainer", "hide_from_home", "description", "name", "type", "sport_type", "gear_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdatableActivity:
        """Create an instance of UpdatableActivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdatableActivity:
        """Create an instance of UpdatableActivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdatableActivity.parse_obj(obj)

        _obj = UpdatableActivity.parse_obj({
            "commute": obj.get("commute"),
            "trainer": obj.get("trainer"),
            "hide_from_home": obj.get("hide_from_home"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "sport_type": obj.get("sport_type"),
            "gear_id": obj.get("gear_id")
        })
        return _obj


