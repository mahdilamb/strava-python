# coding: utf-8

"""
    Strava API v3

    The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt
from strava_python.models.activity_total import ActivityTotal

class ActivityStats(BaseModel):
    """
    A set of rolled-up statistics and totals for an athlete
    """
    biggest_ride_distance: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The longest distance ridden by the athlete.")
    biggest_climb_elevation_gain: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The highest climb ridden by the athlete.")
    recent_ride_totals: Optional[ActivityTotal] = None
    recent_run_totals: Optional[ActivityTotal] = None
    recent_swim_totals: Optional[ActivityTotal] = None
    ytd_ride_totals: Optional[ActivityTotal] = None
    ytd_run_totals: Optional[ActivityTotal] = None
    ytd_swim_totals: Optional[ActivityTotal] = None
    all_ride_totals: Optional[ActivityTotal] = None
    all_run_totals: Optional[ActivityTotal] = None
    all_swim_totals: Optional[ActivityTotal] = None
    __properties = ["biggest_ride_distance", "biggest_climb_elevation_gain", "recent_ride_totals", "recent_run_totals", "recent_swim_totals", "ytd_ride_totals", "ytd_run_totals", "ytd_swim_totals", "all_ride_totals", "all_run_totals", "all_swim_totals"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ActivityStats:
        """Create an instance of ActivityStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of recent_ride_totals
        if self.recent_ride_totals:
            _dict['recent_ride_totals'] = self.recent_ride_totals.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recent_run_totals
        if self.recent_run_totals:
            _dict['recent_run_totals'] = self.recent_run_totals.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recent_swim_totals
        if self.recent_swim_totals:
            _dict['recent_swim_totals'] = self.recent_swim_totals.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ytd_ride_totals
        if self.ytd_ride_totals:
            _dict['ytd_ride_totals'] = self.ytd_ride_totals.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ytd_run_totals
        if self.ytd_run_totals:
            _dict['ytd_run_totals'] = self.ytd_run_totals.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ytd_swim_totals
        if self.ytd_swim_totals:
            _dict['ytd_swim_totals'] = self.ytd_swim_totals.to_dict()
        # override the default output from pydantic by calling `to_dict()` of all_ride_totals
        if self.all_ride_totals:
            _dict['all_ride_totals'] = self.all_ride_totals.to_dict()
        # override the default output from pydantic by calling `to_dict()` of all_run_totals
        if self.all_run_totals:
            _dict['all_run_totals'] = self.all_run_totals.to_dict()
        # override the default output from pydantic by calling `to_dict()` of all_swim_totals
        if self.all_swim_totals:
            _dict['all_swim_totals'] = self.all_swim_totals.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ActivityStats:
        """Create an instance of ActivityStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ActivityStats.parse_obj(obj)

        _obj = ActivityStats.parse_obj({
            "biggest_ride_distance": obj.get("biggest_ride_distance"),
            "biggest_climb_elevation_gain": obj.get("biggest_climb_elevation_gain"),
            "recent_ride_totals": ActivityTotal.from_dict(obj.get("recent_ride_totals")) if obj.get("recent_ride_totals") is not None else None,
            "recent_run_totals": ActivityTotal.from_dict(obj.get("recent_run_totals")) if obj.get("recent_run_totals") is not None else None,
            "recent_swim_totals": ActivityTotal.from_dict(obj.get("recent_swim_totals")) if obj.get("recent_swim_totals") is not None else None,
            "ytd_ride_totals": ActivityTotal.from_dict(obj.get("ytd_ride_totals")) if obj.get("ytd_ride_totals") is not None else None,
            "ytd_run_totals": ActivityTotal.from_dict(obj.get("ytd_run_totals")) if obj.get("ytd_run_totals") is not None else None,
            "ytd_swim_totals": ActivityTotal.from_dict(obj.get("ytd_swim_totals")) if obj.get("ytd_swim_totals") is not None else None,
            "all_ride_totals": ActivityTotal.from_dict(obj.get("all_ride_totals")) if obj.get("all_ride_totals") is not None else None,
            "all_run_totals": ActivityTotal.from_dict(obj.get("all_run_totals")) if obj.get("all_run_totals") is not None else None,
            "all_swim_totals": ActivityTotal.from_dict(obj.get("all_swim_totals")) if obj.get("all_swim_totals") is not None else None
        })
        return _obj


