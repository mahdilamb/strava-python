# coding: utf-8

"""
    Strava API v3

    The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conint, conlist
from strava_python.models.activity_type import ActivityType
from strava_python.models.meta_athlete import MetaAthlete
from strava_python.models.polyline_map import PolylineMap
from strava_python.models.sport_type import SportType

class SummaryActivity(BaseModel):
    """
    SummaryActivity
    """
    id: Optional[StrictInt] = Field(None, description="The unique identifier of the activity")
    external_id: Optional[StrictStr] = Field(None, description="The identifier provided at upload time")
    upload_id: Optional[StrictInt] = Field(None, description="The identifier of the upload that resulted in this activity")
    athlete: Optional[MetaAthlete] = None
    name: Optional[StrictStr] = Field(None, description="The name of the activity")
    distance: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The activity's distance, in meters")
    moving_time: Optional[StrictInt] = Field(None, description="The activity's moving time, in seconds")
    elapsed_time: Optional[StrictInt] = Field(None, description="The activity's elapsed time, in seconds")
    total_elevation_gain: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The activity's total elevation gain.")
    elev_high: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The activity's highest elevation, in meters")
    elev_low: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The activity's lowest elevation, in meters")
    type: Optional[ActivityType] = None
    sport_type: Optional[SportType] = None
    start_date: Optional[datetime] = Field(None, description="The time at which the activity was started.")
    start_date_local: Optional[datetime] = Field(None, description="The time at which the activity was started in the local timezone.")
    timezone: Optional[StrictStr] = Field(None, description="The timezone of the activity")
    start_latlng: Optional[conlist(Union[StrictFloat, StrictInt], max_items=2, min_items=2)] = Field(None, description="A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.")
    end_latlng: Optional[conlist(Union[StrictFloat, StrictInt], max_items=2, min_items=2)] = Field(None, description="A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.")
    achievement_count: Optional[StrictInt] = Field(None, description="The number of achievements gained during this activity")
    kudos_count: Optional[StrictInt] = Field(None, description="The number of kudos given for this activity")
    comment_count: Optional[StrictInt] = Field(None, description="The number of comments for this activity")
    athlete_count: Optional[conint(strict=True, ge=1)] = Field(None, description="The number of athletes for taking part in a group activity")
    photo_count: Optional[StrictInt] = Field(None, description="The number of Instagram photos for this activity")
    total_photo_count: Optional[StrictInt] = Field(None, description="The number of Instagram and Strava photos for this activity")
    map: Optional[PolylineMap] = None
    trainer: Optional[StrictBool] = Field(None, description="Whether this activity was recorded on a training machine")
    commute: Optional[StrictBool] = Field(None, description="Whether this activity is a commute")
    manual: Optional[StrictBool] = Field(None, description="Whether this activity was created manually")
    private: Optional[StrictBool] = Field(None, description="Whether this activity is private")
    flagged: Optional[StrictBool] = Field(None, description="Whether this activity is flagged")
    workout_type: Optional[StrictInt] = Field(None, description="The activity's workout type")
    upload_id_str: Optional[StrictStr] = Field(None, description="The unique identifier of the upload in string format")
    average_speed: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The activity's average speed, in meters per second")
    max_speed: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The activity's max speed, in meters per second")
    has_kudoed: Optional[StrictBool] = Field(None, description="Whether the logged-in athlete has kudoed this activity")
    hide_from_home: Optional[StrictBool] = Field(None, description="Whether the activity is muted")
    gear_id: Optional[StrictStr] = Field(None, description="The id of the gear for the activity")
    kilojoules: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The total work done in kilojoules during this activity. Rides only")
    average_watts: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Average power output in watts during this activity. Rides only")
    device_watts: Optional[StrictBool] = Field(None, description="Whether the watts are from a power meter, false if estimated")
    max_watts: Optional[StrictInt] = Field(None, description="Rides with power meter data only")
    weighted_average_watts: Optional[StrictInt] = Field(None, description="Similar to Normalized Power. Rides with power meter data only")
    __properties = ["id", "external_id", "upload_id", "athlete", "name", "distance", "moving_time", "elapsed_time", "total_elevation_gain", "elev_high", "elev_low", "type", "sport_type", "start_date", "start_date_local", "timezone", "start_latlng", "end_latlng", "achievement_count", "kudos_count", "comment_count", "athlete_count", "photo_count", "total_photo_count", "map", "trainer", "commute", "manual", "private", "flagged", "workout_type", "upload_id_str", "average_speed", "max_speed", "has_kudoed", "hide_from_home", "gear_id", "kilojoules", "average_watts", "device_watts", "max_watts", "weighted_average_watts"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SummaryActivity:
        """Create an instance of SummaryActivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of athlete
        if self.athlete:
            _dict['athlete'] = self.athlete.to_dict()
        # override the default output from pydantic by calling `to_dict()` of map
        if self.map:
            _dict['map'] = self.map.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SummaryActivity:
        """Create an instance of SummaryActivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SummaryActivity.parse_obj(obj)

        _obj = SummaryActivity.parse_obj({
            "id": obj.get("id"),
            "external_id": obj.get("external_id"),
            "upload_id": obj.get("upload_id"),
            "athlete": MetaAthlete.from_dict(obj.get("athlete")) if obj.get("athlete") is not None else None,
            "name": obj.get("name"),
            "distance": obj.get("distance"),
            "moving_time": obj.get("moving_time"),
            "elapsed_time": obj.get("elapsed_time"),
            "total_elevation_gain": obj.get("total_elevation_gain"),
            "elev_high": obj.get("elev_high"),
            "elev_low": obj.get("elev_low"),
            "type": obj.get("type"),
            "sport_type": obj.get("sport_type"),
            "start_date": obj.get("start_date"),
            "start_date_local": obj.get("start_date_local"),
            "timezone": obj.get("timezone"),
            "start_latlng": obj.get("start_latlng"),
            "end_latlng": obj.get("end_latlng"),
            "achievement_count": obj.get("achievement_count"),
            "kudos_count": obj.get("kudos_count"),
            "comment_count": obj.get("comment_count"),
            "athlete_count": obj.get("athlete_count"),
            "photo_count": obj.get("photo_count"),
            "total_photo_count": obj.get("total_photo_count"),
            "map": PolylineMap.from_dict(obj.get("map")) if obj.get("map") is not None else None,
            "trainer": obj.get("trainer"),
            "commute": obj.get("commute"),
            "manual": obj.get("manual"),
            "private": obj.get("private"),
            "flagged": obj.get("flagged"),
            "workout_type": obj.get("workout_type"),
            "upload_id_str": obj.get("upload_id_str"),
            "average_speed": obj.get("average_speed"),
            "max_speed": obj.get("max_speed"),
            "has_kudoed": obj.get("has_kudoed"),
            "hide_from_home": obj.get("hide_from_home"),
            "gear_id": obj.get("gear_id"),
            "kilojoules": obj.get("kilojoules"),
            "average_watts": obj.get("average_watts"),
            "device_watts": obj.get("device_watts"),
            "max_watts": obj.get("max_watts"),
            "weighted_average_watts": obj.get("weighted_average_watts")
        })
        return _obj


