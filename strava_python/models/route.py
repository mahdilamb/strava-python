# coding: utf-8

"""
    Strava API v3

    The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from strava_python.models.polyline_map import PolylineMap
from strava_python.models.summary_athlete import SummaryAthlete
from strava_python.models.summary_segment import SummarySegment

class Route(BaseModel):
    """
    Route
    """
    athlete: Optional[SummaryAthlete] = None
    description: Optional[StrictStr] = Field(None, description="The description of the route")
    distance: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The route's distance, in meters")
    elevation_gain: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The route's elevation gain.")
    id: Optional[StrictInt] = Field(None, description="The unique identifier of this route")
    id_str: Optional[StrictStr] = Field(None, description="The unique identifier of the route in string format")
    map: Optional[PolylineMap] = None
    name: Optional[StrictStr] = Field(None, description="The name of this route")
    private: Optional[StrictBool] = Field(None, description="Whether this route is private")
    starred: Optional[StrictBool] = Field(None, description="Whether this route is starred by the logged-in athlete")
    timestamp: Optional[StrictInt] = Field(None, description="An epoch timestamp of when the route was created")
    type: Optional[StrictInt] = Field(None, description="This route's type (1 for ride, 2 for runs)")
    sub_type: Optional[StrictInt] = Field(None, description="This route's sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed)")
    created_at: Optional[datetime] = Field(None, description="The time at which the route was created")
    updated_at: Optional[datetime] = Field(None, description="The time at which the route was last updated")
    estimated_moving_time: Optional[StrictInt] = Field(None, description="Estimated time in seconds for the authenticated athlete to complete route")
    segments: Optional[conlist(SummarySegment)] = Field(None, description="The segments traversed by this route")
    __properties = ["athlete", "description", "distance", "elevation_gain", "id", "id_str", "map", "name", "private", "starred", "timestamp", "type", "sub_type", "created_at", "updated_at", "estimated_moving_time", "segments"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Route:
        """Create an instance of Route from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of athlete
        if self.athlete:
            _dict['athlete'] = self.athlete.to_dict()
        # override the default output from pydantic by calling `to_dict()` of map
        if self.map:
            _dict['map'] = self.map.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in segments (list)
        _items = []
        if self.segments:
            for _item in self.segments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['segments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Route:
        """Create an instance of Route from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Route.parse_obj(obj)

        _obj = Route.parse_obj({
            "athlete": SummaryAthlete.from_dict(obj.get("athlete")) if obj.get("athlete") is not None else None,
            "description": obj.get("description"),
            "distance": obj.get("distance"),
            "elevation_gain": obj.get("elevation_gain"),
            "id": obj.get("id"),
            "id_str": obj.get("id_str"),
            "map": PolylineMap.from_dict(obj.get("map")) if obj.get("map") is not None else None,
            "name": obj.get("name"),
            "private": obj.get("private"),
            "starred": obj.get("starred"),
            "timestamp": obj.get("timestamp"),
            "type": obj.get("type"),
            "sub_type": obj.get("sub_type"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "estimated_moving_time": obj.get("estimated_moving_time"),
            "segments": [SummarySegment.from_dict(_item) for _item in obj.get("segments")] if obj.get("segments") is not None else None
        })
        return _obj


