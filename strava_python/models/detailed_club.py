# coding: utf-8

"""
    Strava API v3

    The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from strava_python.models.activity_type import ActivityType

class DetailedClub(BaseModel):
    """
    DetailedClub
    """
    id: Optional[StrictInt] = Field(None, description="The club's unique identifier.")
    resource_state: Optional[StrictInt] = Field(None, description="Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"")
    name: Optional[StrictStr] = Field(None, description="The club's name.")
    profile_medium: Optional[StrictStr] = Field(None, description="URL to a 60x60 pixel profile picture.")
    cover_photo: Optional[StrictStr] = Field(None, description="URL to a ~1185x580 pixel cover photo.")
    cover_photo_small: Optional[StrictStr] = Field(None, description="URL to a ~360x176  pixel cover photo.")
    sport_type: Optional[StrictStr] = Field(None, description="Deprecated. Prefer to use activity_types.")
    activity_types: Optional[conlist(ActivityType)] = Field(None, description="The activity types that count for a club. This takes precedence over sport_type.")
    city: Optional[StrictStr] = Field(None, description="The club's city.")
    state: Optional[StrictStr] = Field(None, description="The club's state or geographical region.")
    country: Optional[StrictStr] = Field(None, description="The club's country.")
    private: Optional[StrictBool] = Field(None, description="Whether the club is private.")
    member_count: Optional[StrictInt] = Field(None, description="The club's member count.")
    featured: Optional[StrictBool] = Field(None, description="Whether the club is featured or not.")
    verified: Optional[StrictBool] = Field(None, description="Whether the club is verified or not.")
    url: Optional[StrictStr] = Field(None, description="The club's vanity URL.")
    membership: Optional[StrictStr] = Field(None, description="The membership status of the logged-in athlete.")
    admin: Optional[StrictBool] = Field(None, description="Whether the currently logged-in athlete is an administrator of this club.")
    owner: Optional[StrictBool] = Field(None, description="Whether the currently logged-in athlete is the owner of this club.")
    following_count: Optional[StrictInt] = Field(None, description="The number of athletes in the club that the logged-in athlete follows.")
    __properties = ["id", "resource_state", "name", "profile_medium", "cover_photo", "cover_photo_small", "sport_type", "activity_types", "city", "state", "country", "private", "member_count", "featured", "verified", "url", "membership", "admin", "owner", "following_count"]

    @validator('sport_type')
    def sport_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('cycling', 'running', 'triathlon', 'other'):
            raise ValueError("must be one of enum values ('cycling', 'running', 'triathlon', 'other')")
        return value

    @validator('membership')
    def membership_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('member', 'pending'):
            raise ValueError("must be one of enum values ('member', 'pending')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DetailedClub:
        """Create an instance of DetailedClub from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DetailedClub:
        """Create an instance of DetailedClub from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DetailedClub.parse_obj(obj)

        _obj = DetailedClub.parse_obj({
            "id": obj.get("id"),
            "resource_state": obj.get("resource_state"),
            "name": obj.get("name"),
            "profile_medium": obj.get("profile_medium"),
            "cover_photo": obj.get("cover_photo"),
            "cover_photo_small": obj.get("cover_photo_small"),
            "sport_type": obj.get("sport_type"),
            "activity_types": obj.get("activity_types"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "country": obj.get("country"),
            "private": obj.get("private"),
            "member_count": obj.get("member_count"),
            "featured": obj.get("featured"),
            "verified": obj.get("verified"),
            "url": obj.get("url"),
            "membership": obj.get("membership"),
            "admin": obj.get("admin"),
            "owner": obj.get("owner"),
            "following_count": obj.get("following_count")
        })
        return _obj


