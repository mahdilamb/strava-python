# coding: utf-8

"""
    Strava API v3

    The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator

class SummaryAthlete(BaseModel):
    """
    SummaryAthlete
    """
    id: Optional[StrictInt] = Field(None, description="The unique identifier of the athlete")
    resource_state: Optional[StrictInt] = Field(None, description="Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"")
    firstname: Optional[StrictStr] = Field(None, description="The athlete's first name.")
    lastname: Optional[StrictStr] = Field(None, description="The athlete's last name.")
    profile_medium: Optional[StrictStr] = Field(None, description="URL to a 62x62 pixel profile picture.")
    profile: Optional[StrictStr] = Field(None, description="URL to a 124x124 pixel profile picture.")
    city: Optional[StrictStr] = Field(None, description="The athlete's city.")
    state: Optional[StrictStr] = Field(None, description="The athlete's state or geographical region.")
    country: Optional[StrictStr] = Field(None, description="The athlete's country.")
    sex: Optional[StrictStr] = Field(None, description="The athlete's sex.")
    premium: Optional[StrictBool] = Field(None, description="Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.")
    summit: Optional[StrictBool] = Field(None, description="Whether the athlete has any Summit subscription.")
    created_at: Optional[datetime] = Field(None, description="The time at which the athlete was created.")
    updated_at: Optional[datetime] = Field(None, description="The time at which the athlete was last updated.")
    __properties = ["id", "resource_state", "firstname", "lastname", "profile_medium", "profile", "city", "state", "country", "sex", "premium", "summit", "created_at", "updated_at"]

    @validator('sex')
    def sex_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('M', 'F'):
            raise ValueError("must be one of enum values ('M', 'F')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SummaryAthlete:
        """Create an instance of SummaryAthlete from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SummaryAthlete:
        """Create an instance of SummaryAthlete from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SummaryAthlete.parse_obj(obj)

        _obj = SummaryAthlete.parse_obj({
            "id": obj.get("id"),
            "resource_state": obj.get("resource_state"),
            "firstname": obj.get("firstname"),
            "lastname": obj.get("lastname"),
            "profile_medium": obj.get("profile_medium"),
            "profile": obj.get("profile"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "country": obj.get("country"),
            "sex": obj.get("sex"),
            "premium": obj.get("premium"),
            "summit": obj.get("summit"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


