# coding: utf-8

"""
    Strava API v3

    The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from strava_python.models.meta_activity import MetaActivity
from strava_python.models.meta_athlete import MetaAthlete

class Lap(BaseModel):
    """
    Lap
    """
    id: Optional[StrictInt] = Field(None, description="The unique identifier of this lap")
    activity: Optional[MetaActivity] = None
    athlete: Optional[MetaAthlete] = None
    average_cadence: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The lap's average cadence")
    average_speed: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The lap's average speed")
    distance: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The lap's distance, in meters")
    elapsed_time: Optional[StrictInt] = Field(None, description="The lap's elapsed time, in seconds")
    start_index: Optional[StrictInt] = Field(None, description="The start index of this effort in its activity's stream")
    end_index: Optional[StrictInt] = Field(None, description="The end index of this effort in its activity's stream")
    lap_index: Optional[StrictInt] = Field(None, description="The index of this lap in the activity it belongs to")
    max_speed: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The maximum speed of this lat, in meters per second")
    moving_time: Optional[StrictInt] = Field(None, description="The lap's moving time, in seconds")
    name: Optional[StrictStr] = Field(None, description="The name of the lap")
    pace_zone: Optional[StrictInt] = Field(None, description="The athlete's pace zone during this lap")
    split: Optional[StrictInt] = None
    start_date: Optional[datetime] = Field(None, description="The time at which the lap was started.")
    start_date_local: Optional[datetime] = Field(None, description="The time at which the lap was started in the local timezone.")
    total_elevation_gain: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The elevation gain of this lap, in meters")
    __properties = ["id", "activity", "athlete", "average_cadence", "average_speed", "distance", "elapsed_time", "start_index", "end_index", "lap_index", "max_speed", "moving_time", "name", "pace_zone", "split", "start_date", "start_date_local", "total_elevation_gain"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Lap:
        """Create an instance of Lap from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of activity
        if self.activity:
            _dict['activity'] = self.activity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of athlete
        if self.athlete:
            _dict['athlete'] = self.athlete.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Lap:
        """Create an instance of Lap from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Lap.parse_obj(obj)

        _obj = Lap.parse_obj({
            "id": obj.get("id"),
            "activity": MetaActivity.from_dict(obj.get("activity")) if obj.get("activity") is not None else None,
            "athlete": MetaAthlete.from_dict(obj.get("athlete")) if obj.get("athlete") is not None else None,
            "average_cadence": obj.get("average_cadence"),
            "average_speed": obj.get("average_speed"),
            "distance": obj.get("distance"),
            "elapsed_time": obj.get("elapsed_time"),
            "start_index": obj.get("start_index"),
            "end_index": obj.get("end_index"),
            "lap_index": obj.get("lap_index"),
            "max_speed": obj.get("max_speed"),
            "moving_time": obj.get("moving_time"),
            "name": obj.get("name"),
            "pace_zone": obj.get("pace_zone"),
            "split": obj.get("split"),
            "start_date": obj.get("start_date"),
            "start_date_local": obj.get("start_date_local"),
            "total_elevation_gain": obj.get("total_elevation_gain")
        })
        return _obj


