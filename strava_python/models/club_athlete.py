# coding: utf-8

"""
    Strava API v3

    The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class ClubAthlete(BaseModel):
    """
    ClubAthlete
    """
    resource_state: Optional[StrictInt] = Field(None, description="Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"")
    firstname: Optional[StrictStr] = Field(None, description="The athlete's first name.")
    lastname: Optional[StrictStr] = Field(None, description="The athlete's last initial.")
    member: Optional[StrictStr] = Field(None, description="The athlete's member status.")
    admin: Optional[StrictBool] = Field(None, description="Whether the athlete is a club admin.")
    owner: Optional[StrictBool] = Field(None, description="Whether the athlete is club owner.")
    __properties = ["resource_state", "firstname", "lastname", "member", "admin", "owner"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClubAthlete:
        """Create an instance of ClubAthlete from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClubAthlete:
        """Create an instance of ClubAthlete from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClubAthlete.parse_obj(obj)

        _obj = ClubAthlete.parse_obj({
            "resource_state": obj.get("resource_state"),
            "firstname": obj.get("firstname"),
            "lastname": obj.get("lastname"),
            "member": obj.get("member"),
            "admin": obj.get("admin"),
            "owner": obj.get("owner")
        })
        return _obj


