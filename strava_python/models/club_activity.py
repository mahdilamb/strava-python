# coding: utf-8

"""
    Strava API v3

    The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from strava_python.models.activity_type import ActivityType
from strava_python.models.meta_athlete import MetaAthlete
from strava_python.models.sport_type import SportType

class ClubActivity(BaseModel):
    """
    ClubActivity
    """
    athlete: Optional[MetaAthlete] = None
    name: Optional[StrictStr] = Field(None, description="The name of the activity")
    distance: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The activity's distance, in meters")
    moving_time: Optional[StrictInt] = Field(None, description="The activity's moving time, in seconds")
    elapsed_time: Optional[StrictInt] = Field(None, description="The activity's elapsed time, in seconds")
    total_elevation_gain: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The activity's total elevation gain.")
    type: Optional[ActivityType] = None
    sport_type: Optional[SportType] = None
    workout_type: Optional[StrictInt] = Field(None, description="The activity's workout type")
    __properties = ["athlete", "name", "distance", "moving_time", "elapsed_time", "total_elevation_gain", "type", "sport_type", "workout_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClubActivity:
        """Create an instance of ClubActivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of athlete
        if self.athlete:
            _dict['athlete'] = self.athlete.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClubActivity:
        """Create an instance of ClubActivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClubActivity.parse_obj(obj)

        _obj = ClubActivity.parse_obj({
            "athlete": MetaAthlete.from_dict(obj.get("athlete")) if obj.get("athlete") is not None else None,
            "name": obj.get("name"),
            "distance": obj.get("distance"),
            "moving_time": obj.get("moving_time"),
            "elapsed_time": obj.get("elapsed_time"),
            "total_elevation_gain": obj.get("total_elevation_gain"),
            "type": obj.get("type"),
            "sport_type": obj.get("sport_type"),
            "workout_type": obj.get("workout_type")
        })
        return _obj


