# coding: utf-8

"""
    Strava API v3

    The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist, validator
from strava_python.models.polyline_map import PolylineMap
from strava_python.models.summary_pr_segment_effort import SummaryPRSegmentEffort
from strava_python.models.summary_segment_effort import SummarySegmentEffort

class DetailedSegment(BaseModel):
    """
    DetailedSegment
    """
    id: Optional[StrictInt] = Field(None, description="The unique identifier of this segment")
    name: Optional[StrictStr] = Field(None, description="The name of this segment")
    activity_type: Optional[StrictStr] = None
    distance: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The segment's distance, in meters")
    average_grade: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The segment's average grade, in percents")
    maximum_grade: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The segments's maximum grade, in percents")
    elevation_high: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The segments's highest elevation, in meters")
    elevation_low: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The segments's lowest elevation, in meters")
    start_latlng: Optional[conlist(Union[StrictFloat, StrictInt], max_items=2, min_items=2)] = Field(None, description="A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.")
    end_latlng: Optional[conlist(Union[StrictFloat, StrictInt], max_items=2, min_items=2)] = Field(None, description="A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.")
    climb_category: Optional[StrictInt] = Field(None, description="The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category.")
    city: Optional[StrictStr] = Field(None, description="The segments's city.")
    state: Optional[StrictStr] = Field(None, description="The segments's state or geographical region.")
    country: Optional[StrictStr] = Field(None, description="The segment's country.")
    private: Optional[StrictBool] = Field(None, description="Whether this segment is private.")
    athlete_pr_effort: Optional[SummaryPRSegmentEffort] = None
    athlete_segment_stats: Optional[SummarySegmentEffort] = None
    created_at: Optional[datetime] = Field(None, description="The time at which the segment was created.")
    updated_at: Optional[datetime] = Field(None, description="The time at which the segment was last updated.")
    total_elevation_gain: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The segment's total elevation gain.")
    map: Optional[PolylineMap] = None
    effort_count: Optional[StrictInt] = Field(None, description="The total number of efforts for this segment")
    athlete_count: Optional[StrictInt] = Field(None, description="The number of unique athletes who have an effort for this segment")
    hazardous: Optional[StrictBool] = Field(None, description="Whether this segment is considered hazardous")
    star_count: Optional[StrictInt] = Field(None, description="The number of stars for this segment")
    __properties = ["id", "name", "activity_type", "distance", "average_grade", "maximum_grade", "elevation_high", "elevation_low", "start_latlng", "end_latlng", "climb_category", "city", "state", "country", "private", "athlete_pr_effort", "athlete_segment_stats", "created_at", "updated_at", "total_elevation_gain", "map", "effort_count", "athlete_count", "hazardous", "star_count"]

    @validator('activity_type')
    def activity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Ride', 'Run'):
            raise ValueError("must be one of enum values ('Ride', 'Run')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DetailedSegment:
        """Create an instance of DetailedSegment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of athlete_pr_effort
        if self.athlete_pr_effort:
            _dict['athlete_pr_effort'] = self.athlete_pr_effort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of athlete_segment_stats
        if self.athlete_segment_stats:
            _dict['athlete_segment_stats'] = self.athlete_segment_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of map
        if self.map:
            _dict['map'] = self.map.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DetailedSegment:
        """Create an instance of DetailedSegment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DetailedSegment.parse_obj(obj)

        _obj = DetailedSegment.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "activity_type": obj.get("activity_type"),
            "distance": obj.get("distance"),
            "average_grade": obj.get("average_grade"),
            "maximum_grade": obj.get("maximum_grade"),
            "elevation_high": obj.get("elevation_high"),
            "elevation_low": obj.get("elevation_low"),
            "start_latlng": obj.get("start_latlng"),
            "end_latlng": obj.get("end_latlng"),
            "climb_category": obj.get("climb_category"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "country": obj.get("country"),
            "private": obj.get("private"),
            "athlete_pr_effort": SummaryPRSegmentEffort.from_dict(obj.get("athlete_pr_effort")) if obj.get("athlete_pr_effort") is not None else None,
            "athlete_segment_stats": SummarySegmentEffort.from_dict(obj.get("athlete_segment_stats")) if obj.get("athlete_segment_stats") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "total_elevation_gain": obj.get("total_elevation_gain"),
            "map": PolylineMap.from_dict(obj.get("map")) if obj.get("map") is not None else None,
            "effort_count": obj.get("effort_count"),
            "athlete_count": obj.get("athlete_count"),
            "hazardous": obj.get("hazardous"),
            "star_count": obj.get("star_count")
        })
        return _obj


