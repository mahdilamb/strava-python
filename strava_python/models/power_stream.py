# coding: utf-8

"""
    Strava API v3

    The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator

class PowerStream(BaseModel):
    """
    PowerStream
    """
    original_size: Optional[StrictInt] = Field(None, description="The number of data points in this stream")
    resolution: Optional[StrictStr] = Field(None, description="The level of detail (sampling) in which this stream was returned")
    series_type: Optional[StrictStr] = Field(None, description="The base series used in the case the stream was downsampled")
    data: Optional[conlist(StrictInt)] = Field(None, description="The sequence of power values for this stream, in watts")
    __properties = ["original_size", "resolution", "series_type", "data"]

    @validator('resolution')
    def resolution_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('low', 'medium', 'high'):
            raise ValueError("must be one of enum values ('low', 'medium', 'high')")
        return value

    @validator('series_type')
    def series_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('distance', 'time'):
            raise ValueError("must be one of enum values ('distance', 'time')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PowerStream:
        """Create an instance of PowerStream from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PowerStream:
        """Create an instance of PowerStream from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PowerStream.parse_obj(obj)

        _obj = PowerStream.parse_obj({
            "original_size": obj.get("original_size"),
            "resolution": obj.get("resolution"),
            "series_type": obj.get("series_type"),
            "data": obj.get("data")
        })
        return _obj


