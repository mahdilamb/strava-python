# coding: utf-8

"""
    Strava API v3

    The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

class DetailedGear(BaseModel):
    """
    DetailedGear
    """
    id: Optional[StrictStr] = Field(None, description="The gear's unique identifier.")
    resource_state: Optional[StrictInt] = Field(None, description="Resource state, indicates level of detail. Possible values: 2 -> \"summary\", 3 -> \"detail\"")
    primary: Optional[StrictBool] = Field(None, description="Whether this gear's is the owner's default one.")
    name: Optional[StrictStr] = Field(None, description="The gear's name.")
    distance: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The distance logged with this gear.")
    brand_name: Optional[StrictStr] = Field(None, description="The gear's brand name.")
    model_name: Optional[StrictStr] = Field(None, description="The gear's model name.")
    frame_type: Optional[StrictInt] = Field(None, description="The gear's frame type (bike only).")
    description: Optional[StrictStr] = Field(None, description="The gear's description.")
    __properties = ["id", "resource_state", "primary", "name", "distance", "brand_name", "model_name", "frame_type", "description"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DetailedGear:
        """Create an instance of DetailedGear from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DetailedGear:
        """Create an instance of DetailedGear from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DetailedGear.parse_obj(obj)

        _obj = DetailedGear.parse_obj({
            "id": obj.get("id"),
            "resource_state": obj.get("resource_state"),
            "primary": obj.get("primary"),
            "name": obj.get("name"),
            "distance": obj.get("distance"),
            "brand_name": obj.get("brand_name"),
            "model_name": obj.get("model_name"),
            "frame_type": obj.get("frame_type"),
            "description": obj.get("description")
        })
        return _obj


