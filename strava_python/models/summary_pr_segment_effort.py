# coding: utf-8

"""
    Strava API v3

    The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt

class SummaryPRSegmentEffort(BaseModel):
    """
    SummaryPRSegmentEffort
    """
    pr_activity_id: Optional[StrictInt] = Field(None, description="The unique identifier of the activity related to the PR effort.")
    pr_elapsed_time: Optional[StrictInt] = Field(None, description="The elapsed time ot the PR effort.")
    pr_date: Optional[datetime] = Field(None, description="The time at which the PR effort was started.")
    effort_count: Optional[StrictInt] = Field(None, description="Number of efforts by the authenticated athlete on this segment.")
    __properties = ["pr_activity_id", "pr_elapsed_time", "pr_date", "effort_count"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SummaryPRSegmentEffort:
        """Create an instance of SummaryPRSegmentEffort from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SummaryPRSegmentEffort:
        """Create an instance of SummaryPRSegmentEffort from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SummaryPRSegmentEffort.parse_obj(obj)

        _obj = SummaryPRSegmentEffort.parse_obj({
            "pr_activity_id": obj.get("pr_activity_id"),
            "pr_elapsed_time": obj.get("pr_elapsed_time"),
            "pr_date": obj.get("pr_date"),
            "effort_count": obj.get("effort_count")
        })
        return _obj


