# coding: utf-8

"""
    Strava API v3

    The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr

from typing import List, Optional, Union

from strava_python.models.activity_zone import ActivityZone
from strava_python.models.comment import Comment
from strava_python.models.detailed_activity import DetailedActivity
from strava_python.models.lap import Lap
from strava_python.models.summary_activity import SummaryActivity
from strava_python.models.summary_athlete import SummaryAthlete
from strava_python.models.updatable_activity import UpdatableActivity

from strava_python.api_client import ApiClient
from strava_python.api_response import ApiResponse
from strava_python.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ActivitiesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_activity(self, name : Annotated[StrictStr, Field(..., description="The name of the activity.")], sport_type : Annotated[StrictStr, Field(..., description="Sport type of activity. For example - Run, MountainBikeRide, Ride, etc.")], start_date_local : Annotated[datetime, Field(..., description="ISO 8601 formatted date time.")], elapsed_time : Annotated[StrictInt, Field(..., description="In seconds.")], type : Annotated[Optional[StrictStr], Field(description="Type of activity. For example - Run, Ride etc.")] = None, description : Annotated[Optional[StrictStr], Field(description="Description of the activity.")] = None, distance : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="In meters.")] = None, trainer : Annotated[Optional[StrictInt], Field(description="Set to 1 to mark as a trainer activity.")] = None, commute : Annotated[Optional[StrictInt], Field(description="Set to 1 to mark as commute.")] = None, **kwargs) -> DetailedActivity:  # noqa: E501
        """Create an Activity  # noqa: E501

        Creates a manual activity for an athlete, requires activity:write scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_activity(name, sport_type, start_date_local, elapsed_time, type, description, distance, trainer, commute, async_req=True)
        >>> result = thread.get()

        :param name: The name of the activity. (required)
        :type name: str
        :param sport_type: Sport type of activity. For example - Run, MountainBikeRide, Ride, etc. (required)
        :type sport_type: str
        :param start_date_local: ISO 8601 formatted date time. (required)
        :type start_date_local: datetime
        :param elapsed_time: In seconds. (required)
        :type elapsed_time: int
        :param type: Type of activity. For example - Run, Ride etc.
        :type type: str
        :param description: Description of the activity.
        :type description: str
        :param distance: In meters.
        :type distance: float
        :param trainer: Set to 1 to mark as a trainer activity.
        :type trainer: int
        :param commute: Set to 1 to mark as commute.
        :type commute: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DetailedActivity
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_activity_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_activity_with_http_info(name, sport_type, start_date_local, elapsed_time, type, description, distance, trainer, commute, **kwargs)  # noqa: E501

    @validate_arguments
    def create_activity_with_http_info(self, name : Annotated[StrictStr, Field(..., description="The name of the activity.")], sport_type : Annotated[StrictStr, Field(..., description="Sport type of activity. For example - Run, MountainBikeRide, Ride, etc.")], start_date_local : Annotated[datetime, Field(..., description="ISO 8601 formatted date time.")], elapsed_time : Annotated[StrictInt, Field(..., description="In seconds.")], type : Annotated[Optional[StrictStr], Field(description="Type of activity. For example - Run, Ride etc.")] = None, description : Annotated[Optional[StrictStr], Field(description="Description of the activity.")] = None, distance : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="In meters.")] = None, trainer : Annotated[Optional[StrictInt], Field(description="Set to 1 to mark as a trainer activity.")] = None, commute : Annotated[Optional[StrictInt], Field(description="Set to 1 to mark as commute.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create an Activity  # noqa: E501

        Creates a manual activity for an athlete, requires activity:write scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_activity_with_http_info(name, sport_type, start_date_local, elapsed_time, type, description, distance, trainer, commute, async_req=True)
        >>> result = thread.get()

        :param name: The name of the activity. (required)
        :type name: str
        :param sport_type: Sport type of activity. For example - Run, MountainBikeRide, Ride, etc. (required)
        :type sport_type: str
        :param start_date_local: ISO 8601 formatted date time. (required)
        :type start_date_local: datetime
        :param elapsed_time: In seconds. (required)
        :type elapsed_time: int
        :param type: Type of activity. For example - Run, Ride etc.
        :type type: str
        :param description: Description of the activity.
        :type description: str
        :param distance: In meters.
        :type distance: float
        :param trainer: Set to 1 to mark as a trainer activity.
        :type trainer: int
        :param commute: Set to 1 to mark as commute.
        :type commute: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DetailedActivity, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'sport_type',
            'start_date_local',
            'elapsed_time',
            'type',
            'description',
            'distance',
            'trainer',
            'commute'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_activity" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['name']:
            _form_params.append(('name', _params['name']))

        if _params['type']:
            _form_params.append(('type', _params['type']))

        if _params['sport_type']:
            _form_params.append(('sport_type', _params['sport_type']))

        if _params['start_date_local']:
            _form_params.append(('start_date_local', _params['start_date_local']))

        if _params['elapsed_time']:
            _form_params.append(('elapsed_time', _params['elapsed_time']))

        if _params['description']:
            _form_params.append(('description', _params['description']))

        if _params['distance']:
            _form_params.append(('distance', _params['distance']))

        if _params['trainer']:
            _form_params.append(('trainer', _params['trainer']))

        if _params['commute']:
            _form_params.append(('commute', _params['commute']))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['strava_oauth']  # noqa: E501

        _response_types_map = {
            '201': "DetailedActivity",
        }

        return self.api_client.call_api(
            '/activities', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_activity_by_id(self, id : Annotated[StrictInt, Field(..., description="The identifier of the activity.")], include_all_efforts : Annotated[Optional[StrictBool], Field(description="To include all segments efforts.")] = None, **kwargs) -> DetailedActivity:  # noqa: E501
        """Get Activity  # noqa: E501

        Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_activity_by_id(id, include_all_efforts, async_req=True)
        >>> result = thread.get()

        :param id: The identifier of the activity. (required)
        :type id: int
        :param include_all_efforts: To include all segments efforts.
        :type include_all_efforts: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DetailedActivity
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_activity_by_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_activity_by_id_with_http_info(id, include_all_efforts, **kwargs)  # noqa: E501

    @validate_arguments
    def get_activity_by_id_with_http_info(self, id : Annotated[StrictInt, Field(..., description="The identifier of the activity.")], include_all_efforts : Annotated[Optional[StrictBool], Field(description="To include all segments efforts.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Activity  # noqa: E501

        Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_activity_by_id_with_http_info(id, include_all_efforts, async_req=True)
        >>> result = thread.get()

        :param id: The identifier of the activity. (required)
        :type id: int
        :param include_all_efforts: To include all segments efforts.
        :type include_all_efforts: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DetailedActivity, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'include_all_efforts'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_activity_by_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('include_all_efforts') is not None:  # noqa: E501
            _query_params.append(('include_all_efforts', _params['include_all_efforts']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['strava_oauth']  # noqa: E501

        _response_types_map = {
            '200': "DetailedActivity",
        }

        return self.api_client.call_api(
            '/activities/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_comments_by_activity_id(self, id : Annotated[StrictInt, Field(..., description="The identifier of the activity.")], page : Annotated[Optional[StrictInt], Field(description="Deprecated. Prefer to use after_cursor.")] = None, per_page : Annotated[Optional[StrictInt], Field(description="Deprecated. Prefer to use page_size.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of items per page. Defaults to 30.")] = None, after_cursor : Annotated[Optional[StrictStr], Field(description="Cursor of the last item in the previous page of results, used to request the subsequent page of results.  When omitted, the first page of results is fetched.")] = None, **kwargs) -> List[Comment]:  # noqa: E501
        """List Activity Comments  # noqa: E501

        Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_comments_by_activity_id(id, page, per_page, page_size, after_cursor, async_req=True)
        >>> result = thread.get()

        :param id: The identifier of the activity. (required)
        :type id: int
        :param page: Deprecated. Prefer to use after_cursor.
        :type page: int
        :param per_page: Deprecated. Prefer to use page_size.
        :type per_page: int
        :param page_size: Number of items per page. Defaults to 30.
        :type page_size: int
        :param after_cursor: Cursor of the last item in the previous page of results, used to request the subsequent page of results.  When omitted, the first page of results is fetched.
        :type after_cursor: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Comment]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_comments_by_activity_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_comments_by_activity_id_with_http_info(id, page, per_page, page_size, after_cursor, **kwargs)  # noqa: E501

    @validate_arguments
    def get_comments_by_activity_id_with_http_info(self, id : Annotated[StrictInt, Field(..., description="The identifier of the activity.")], page : Annotated[Optional[StrictInt], Field(description="Deprecated. Prefer to use after_cursor.")] = None, per_page : Annotated[Optional[StrictInt], Field(description="Deprecated. Prefer to use page_size.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of items per page. Defaults to 30.")] = None, after_cursor : Annotated[Optional[StrictStr], Field(description="Cursor of the last item in the previous page of results, used to request the subsequent page of results.  When omitted, the first page of results is fetched.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List Activity Comments  # noqa: E501

        Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_comments_by_activity_id_with_http_info(id, page, per_page, page_size, after_cursor, async_req=True)
        >>> result = thread.get()

        :param id: The identifier of the activity. (required)
        :type id: int
        :param page: Deprecated. Prefer to use after_cursor.
        :type page: int
        :param per_page: Deprecated. Prefer to use page_size.
        :type per_page: int
        :param page_size: Number of items per page. Defaults to 30.
        :type page_size: int
        :param after_cursor: Cursor of the last item in the previous page of results, used to request the subsequent page of results.  When omitted, the first page of results is fetched.
        :type after_cursor: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Comment], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'page',
            'per_page',
            'page_size',
            'after_cursor'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_comments_by_activity_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('per_page') is not None:  # noqa: E501
            _query_params.append(('per_page', _params['per_page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('after_cursor') is not None:  # noqa: E501
            _query_params.append(('after_cursor', _params['after_cursor']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['strava_oauth']  # noqa: E501

        _response_types_map = {
            '200': "List[Comment]",
        }

        return self.api_client.call_api(
            '/activities/{id}/comments', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_kudoers_by_activity_id(self, id : Annotated[StrictInt, Field(..., description="The identifier of the activity.")], page : Annotated[Optional[StrictInt], Field(description="Page number. Defaults to 1.")] = None, per_page : Annotated[Optional[StrictInt], Field(description="Number of items per page. Defaults to 30.")] = None, **kwargs) -> List[SummaryAthlete]:  # noqa: E501
        """List Activity Kudoers  # noqa: E501

        Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_kudoers_by_activity_id(id, page, per_page, async_req=True)
        >>> result = thread.get()

        :param id: The identifier of the activity. (required)
        :type id: int
        :param page: Page number. Defaults to 1.
        :type page: int
        :param per_page: Number of items per page. Defaults to 30.
        :type per_page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[SummaryAthlete]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_kudoers_by_activity_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_kudoers_by_activity_id_with_http_info(id, page, per_page, **kwargs)  # noqa: E501

    @validate_arguments
    def get_kudoers_by_activity_id_with_http_info(self, id : Annotated[StrictInt, Field(..., description="The identifier of the activity.")], page : Annotated[Optional[StrictInt], Field(description="Page number. Defaults to 1.")] = None, per_page : Annotated[Optional[StrictInt], Field(description="Number of items per page. Defaults to 30.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List Activity Kudoers  # noqa: E501

        Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_kudoers_by_activity_id_with_http_info(id, page, per_page, async_req=True)
        >>> result = thread.get()

        :param id: The identifier of the activity. (required)
        :type id: int
        :param page: Page number. Defaults to 1.
        :type page: int
        :param per_page: Number of items per page. Defaults to 30.
        :type per_page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[SummaryAthlete], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'page',
            'per_page'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kudoers_by_activity_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('per_page') is not None:  # noqa: E501
            _query_params.append(('per_page', _params['per_page']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['strava_oauth']  # noqa: E501

        _response_types_map = {
            '200': "List[SummaryAthlete]",
        }

        return self.api_client.call_api(
            '/activities/{id}/kudos', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_laps_by_activity_id(self, id : Annotated[StrictInt, Field(..., description="The identifier of the activity.")], **kwargs) -> List[Lap]:  # noqa: E501
        """List Activity Laps  # noqa: E501

        Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_laps_by_activity_id(id, async_req=True)
        >>> result = thread.get()

        :param id: The identifier of the activity. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Lap]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_laps_by_activity_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_laps_by_activity_id_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_laps_by_activity_id_with_http_info(self, id : Annotated[StrictInt, Field(..., description="The identifier of the activity.")], **kwargs) -> ApiResponse:  # noqa: E501
        """List Activity Laps  # noqa: E501

        Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_laps_by_activity_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: The identifier of the activity. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Lap], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_laps_by_activity_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['strava_oauth']  # noqa: E501

        _response_types_map = {
            '200': "List[Lap]",
        }

        return self.api_client.call_api(
            '/activities/{id}/laps', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_logged_in_athlete_activities(self, before : Annotated[Optional[StrictInt], Field(description="An epoch timestamp to use for filtering activities that have taken place before a certain time.")] = None, after : Annotated[Optional[StrictInt], Field(description="An epoch timestamp to use for filtering activities that have taken place after a certain time.")] = None, page : Annotated[Optional[StrictInt], Field(description="Page number. Defaults to 1.")] = None, per_page : Annotated[Optional[StrictInt], Field(description="Number of items per page. Defaults to 30.")] = None, **kwargs) -> List[SummaryActivity]:  # noqa: E501
        """List Athlete Activities  # noqa: E501

        Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_logged_in_athlete_activities(before, after, page, per_page, async_req=True)
        >>> result = thread.get()

        :param before: An epoch timestamp to use for filtering activities that have taken place before a certain time.
        :type before: int
        :param after: An epoch timestamp to use for filtering activities that have taken place after a certain time.
        :type after: int
        :param page: Page number. Defaults to 1.
        :type page: int
        :param per_page: Number of items per page. Defaults to 30.
        :type per_page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[SummaryActivity]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_logged_in_athlete_activities_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_logged_in_athlete_activities_with_http_info(before, after, page, per_page, **kwargs)  # noqa: E501

    @validate_arguments
    def get_logged_in_athlete_activities_with_http_info(self, before : Annotated[Optional[StrictInt], Field(description="An epoch timestamp to use for filtering activities that have taken place before a certain time.")] = None, after : Annotated[Optional[StrictInt], Field(description="An epoch timestamp to use for filtering activities that have taken place after a certain time.")] = None, page : Annotated[Optional[StrictInt], Field(description="Page number. Defaults to 1.")] = None, per_page : Annotated[Optional[StrictInt], Field(description="Number of items per page. Defaults to 30.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List Athlete Activities  # noqa: E501

        Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_logged_in_athlete_activities_with_http_info(before, after, page, per_page, async_req=True)
        >>> result = thread.get()

        :param before: An epoch timestamp to use for filtering activities that have taken place before a certain time.
        :type before: int
        :param after: An epoch timestamp to use for filtering activities that have taken place after a certain time.
        :type after: int
        :param page: Page number. Defaults to 1.
        :type page: int
        :param per_page: Number of items per page. Defaults to 30.
        :type per_page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[SummaryActivity], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'before',
            'after',
            'page',
            'per_page'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_logged_in_athlete_activities" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('before') is not None:  # noqa: E501
            _query_params.append(('before', _params['before']))

        if _params.get('after') is not None:  # noqa: E501
            _query_params.append(('after', _params['after']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('per_page') is not None:  # noqa: E501
            _query_params.append(('per_page', _params['per_page']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['strava_oauth']  # noqa: E501

        _response_types_map = {
            '200': "List[SummaryActivity]",
        }

        return self.api_client.call_api(
            '/athlete/activities', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_zones_by_activity_id(self, id : Annotated[StrictInt, Field(..., description="The identifier of the activity.")], **kwargs) -> List[ActivityZone]:  # noqa: E501
        """Get Activity Zones  # noqa: E501

        Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_zones_by_activity_id(id, async_req=True)
        >>> result = thread.get()

        :param id: The identifier of the activity. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[ActivityZone]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_zones_by_activity_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_zones_by_activity_id_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_zones_by_activity_id_with_http_info(self, id : Annotated[StrictInt, Field(..., description="The identifier of the activity.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get Activity Zones  # noqa: E501

        Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_zones_by_activity_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: The identifier of the activity. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[ActivityZone], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_zones_by_activity_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['strava_oauth']  # noqa: E501

        _response_types_map = {
            '200': "List[ActivityZone]",
        }

        return self.api_client.call_api(
            '/activities/{id}/zones', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_activity_by_id(self, id : Annotated[StrictInt, Field(..., description="The identifier of the activity.")], body : Optional[UpdatableActivity] = None, **kwargs) -> DetailedActivity:  # noqa: E501
        """Update Activity  # noqa: E501

        Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_activity_by_id(id, body, async_req=True)
        >>> result = thread.get()

        :param id: The identifier of the activity. (required)
        :type id: int
        :param body:
        :type body: UpdatableActivity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DetailedActivity
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_activity_by_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_activity_by_id_with_http_info(id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def update_activity_by_id_with_http_info(self, id : Annotated[StrictInt, Field(..., description="The identifier of the activity.")], body : Optional[UpdatableActivity] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Activity  # noqa: E501

        Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_activity_by_id_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param id: The identifier of the activity. (required)
        :type id: int
        :param body:
        :type body: UpdatableActivity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DetailedActivity, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_activity_by_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['strava_oauth']  # noqa: E501

        _response_types_map = {
            '200': "DetailedActivity",
        }

        return self.api_client.call_api(
            '/activities/{id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
