# coding: utf-8

"""
    Strava API v3

    The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

import strava_python
from strava_python.models.detailed_activity import DetailedActivity  # noqa: E501
from strava_python.rest import ApiException

class TestDetailedActivity(unittest.TestCase):
    """DetailedActivity unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test DetailedActivity
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DetailedActivity`
        """
        model = strava_python.models.detailed_activity.DetailedActivity()  # noqa: E501
        if include_optional :
            return DetailedActivity(
                id = 56, 
                external_id = '', 
                upload_id = 56, 
                athlete = strava_python.models.meta_athlete.MetaAthlete(
                    id = 56, ), 
                name = '', 
                distance = 1.337, 
                moving_time = 56, 
                elapsed_time = 56, 
                total_elevation_gain = 1.337, 
                elev_high = 1.337, 
                elev_low = 1.337, 
                type = 'AlpineSki', 
                sport_type = 'AlpineSki', 
                start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                start_date_local = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                timezone = '', 
                start_latlng = [
                    1.337
                    ], 
                end_latlng = [
                    1.337
                    ], 
                achievement_count = 56, 
                kudos_count = 56, 
                comment_count = 56, 
                athlete_count = 1, 
                photo_count = 56, 
                total_photo_count = 56, 
                map = strava_python.models.polyline_map.PolylineMap(
                    id = '', 
                    polyline = '', 
                    summary_polyline = '', ), 
                trainer = True, 
                commute = True, 
                manual = True, 
                private = True, 
                flagged = True, 
                workout_type = 56, 
                upload_id_str = '', 
                average_speed = 1.337, 
                max_speed = 1.337, 
                has_kudoed = True, 
                hide_from_home = True, 
                gear_id = '', 
                kilojoules = 1.337, 
                average_watts = 1.337, 
                device_watts = True, 
                max_watts = 56, 
                weighted_average_watts = 56, 
                description = '', 
                photos = strava_python.models.photos_summary.PhotosSummary(
                    count = 56, 
                    primary = strava_python.models.photos_summary_primary.PhotosSummary_primary(
                        id = 56, 
                        source = 56, 
                        unique_id = '', 
                        urls = {
                            'key' : ''
                            }, ), ), 
                gear = strava_python.models.summary_gear.SummaryGear(
                    id = '', 
                    resource_state = 56, 
                    primary = True, 
                    name = '', 
                    distance = 1.337, ), 
                calories = 1.337, 
                segment_efforts = [
                    null
                    ], 
                device_name = '', 
                embed_token = '', 
                splits_metric = [
                    strava_python.models.split.Split(
                        average_speed = 1.337, 
                        distance = 1.337, 
                        elapsed_time = 56, 
                        elevation_difference = 1.337, 
                        pace_zone = 56, 
                        moving_time = 56, 
                        split = 56, )
                    ], 
                splits_standard = [
                    strava_python.models.split.Split(
                        average_speed = 1.337, 
                        distance = 1.337, 
                        elapsed_time = 56, 
                        elevation_difference = 1.337, 
                        pace_zone = 56, 
                        moving_time = 56, 
                        split = 56, )
                    ], 
                laps = [
                    strava_python.models.lap.Lap(
                        id = 56, 
                        activity = strava_python.models.meta_activity.MetaActivity(
                            id = 56, ), 
                        athlete = strava_python.models.meta_athlete.MetaAthlete(
                            id = 56, ), 
                        average_cadence = 1.337, 
                        average_speed = 1.337, 
                        distance = 1.337, 
                        elapsed_time = 56, 
                        start_index = 56, 
                        end_index = 56, 
                        lap_index = 56, 
                        max_speed = 1.337, 
                        moving_time = 56, 
                        name = '', 
                        pace_zone = 56, 
                        split = 56, 
                        start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        start_date_local = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        total_elevation_gain = 1.337, )
                    ], 
                best_efforts = [
                    null
                    ]
            )
        else :
            return DetailedActivity(
        )
        """

    def testDetailedActivity(self):
        """Test DetailedActivity"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
